name: App Build

on:
  workflow_dispatch:
  push:
    branches:
      - ci

env:
  # Necessary for most environments as build failure can occur due to OOM issues
  NODE_OPTIONS: "--max-old-space-size=4096"
  LLAMA_CPP_VERSION: "b3265"
  APP_VERSION: "v0.${{ github.run_number }}"
  VITE_CLIENT_VERSION: "v0.${{ github.run_number }}"

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        build:
          - name: build-linux
            os: ubuntu-latest
            platform: linux/amd64
            vars:
              llama_cpp_zip: "bin-ubuntu-x64.zip"
          - name: build-mac
            os: macos-latest
            platform: darwin/amd64
            vars:
              llama_cpp_zip: "bin-macos-x64.zip"
          - name: build-windows
            os: windows-latest
            platform: windows/amd64
            vars:
              llama_cpp_zip: "bin-win-vulkan-x64.zip"

    runs-on: ${{ matrix.build.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.14.0'

      - name: Setup RClone
        uses: AnimMouse/setup-rclone@v1
        with:
          disable_base64: true
          rclone_config: |
            [r2]
            type = s3
            provider = Cloudflare
            access_key_id = ${{ secrets.R2_ACCESS_KEY_ID }}
            secret_access_key = ${{ secrets.R2_SECRET_ACCESS_KEY }}
            endpoint = https://${{ secrets.R2_ACCOUNT_ID }}.r2.cloudflarestorage.com
            acl = private
            no_check_bucket = true

      - name: Get llama.cpp server binary
        run: |
          curl --silent -L https://github.com/ggerganov/llama.cpp/releases/download/${{env.LLAMA_CPP_VERSION}}/llama-${{env.LLAMA_CPP_VERSION}}-${{matrix.build.vars.llama_cpp_zip}} > llamacpp.zip
          unzip -j llamacpp.zip -d llamacpp/

      - name: Install Node Dependencies
        run: npm ci

      - name: Build Frontend and Backend
        run: npm run build

      - name: Build Electron
        run: npm run make

      - name: Upload Linux
        if: matrix.build.platform == 'linux/amd64'
        working-directory: out
        run: |
          rclone copy cybermuse-desktop-linux-x64.tar.xz r2:chat-app-releases/latest/
          rclone copyto cybermuse-desktop-linux-x64.tar.xz r2:chat-app-releases/versions/cybermuse-desktop-${{env.APP_VERSION}}-linux.tar.xz
        
      - name: Upload Mac
        if: matrix.build.platform == 'darwin/amd64'
        working-directory: out
        run: |
          rclone copy cybermuse-desktop-mac-x64.zip r2:chat-app-releases/latest/
          rclone copyto cybermuse-desktop-mac-x64.zip r2:chat-app-releases/versions/cybermuse-desktop-${{env.APP_VERSION}}-mac-x64.zip
          rclone copy cybermuse-desktop-mac-arm64.zip r2:chat-app-releases/latest/
          rclone copyto cybermuse-desktop-mac-arm64.zip r2:chat-app-releases/versions/cybermuse-desktop-${{env.APP_VERSION}}-mac-arm64.zip

      - name: Archive and Upload Windows
        if: matrix.build.platform == 'windows/amd64'
        working-directory: out
        run: |
          Compress-Archive -Path cybermuse-desktop-win-x64.exe -DestinationPath cybermuse-desktop-win-x64.zip
          rclone copy cybermuse-desktop-win-x64.zip r2:chat-app-releases/latest/
          rclone copyto cybermuse-desktop-win-x64.zip r2:chat-app-releases/versions/cybermuse-desktop-${{env.APP_VERSION}}-win-x64.zip
