/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/characters": {
    /** Get all characters */
    get: {
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": ({
                id: number;
                name: string;
                description: string | null;
                firstMessage: string | null;
                image: string | null;
                /** @enum {string} */
                type: "user" | "character";
              })[];
          };
        };
      };
    };
  };
  "/api/character/{id}": {
    /** Get a character by ID */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              id: number;
              name: string;
              description: string;
              firstMessage: string | null;
              image: string | null;
              /** @enum {string} */
              type: "user" | "character";
            };
          };
        };
      };
    };
  };
  "/api/create-character": {
    /** Create a character */
    post: {
      requestBody: {
        content: {
          "application/json": {
            name: string;
            description: string;
            firstMessage: string | null;
            image: string | null;
            /** @enum {string} */
            type: "user" | "character";
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              success: boolean;
            };
          };
        };
      };
    };
  };
  "/api/update-character/": {
    /** Update a character */
    post: {
      requestBody: {
        content: {
          "application/json": {
            id: number;
            name: string;
            description: string;
            firstMessage: string | null;
            image: string | null;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              success: boolean;
            };
          };
        };
      };
    };
  };
  "/api/delete-character/": {
    /** Delete a character */
    post: {
      requestBody: {
        content: {
          "application/json": {
            id: number;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              success: boolean;
            };
          };
        };
      };
    };
  };
  "/api/create-chat": {
    /** Create a Chat */
    post: {
      requestBody: {
        content: {
          "application/json": {
            characters: number[];
            userCharacter: number;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              id: number;
            };
          };
        };
      };
    };
  };
  "/api/chats": {
    /** Get all Chats */
    get: {
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": ({
                id: number;
                createdAt: number;
                updatedAt: number;
                chatCharacters: ({
                    characterId: number | null;
                  })[];
              })[];
          };
        };
      };
    };
  };
  "/api/chat/{id}": {
    /** Get a Chat by ID */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              id: number;
              createdAt: number;
              updatedAt: number;
              messages: ({
                  id: number;
                  text: string;
                  characterId: number | null;
                })[];
              chatCharacters: ({
                  character: {
                    id: number;
                    name: string;
                    image: string | null;
                  };
                })[];
            };
          };
        };
      };
    };
  };
  "/api/delete-chat": {
    /** Delete a Chat */
    post: {
      requestBody: {
        content: {
          "application/json": {
            id: number;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              success: boolean;
            };
          };
        };
      };
    };
  };
  "/api/new-message": {
    /** Add a message to the chat */
    post: {
      requestBody: {
        content: {
          "application/json": {
            chatId: number;
            characterId: number;
            text: string;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              success: boolean;
              id?: number;
            };
          };
        };
      };
    };
  };
  "/api/generate-message": {
    /** Generate a new response message */
    post: {
      requestBody: {
        content: {
          "application/json": {
            chatId: number;
          };
        };
      };
      responses: {
        /** @description data: {text} */
        200: {
          content: {
            "text/event-stream": string;
          };
        };
      };
    };
  };
  "/api/update-message": {
    /** Update an existing message */
    post: {
      requestBody: {
        content: {
          "application/json": {
            id: number;
            text: string;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              success: boolean;
            };
          };
        };
      };
    };
  };
  "/api/delete-message": {
    /** Delete a Message */
    post: {
      requestBody: {
        content: {
          "application/json": {
            id: number;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              success: boolean;
            };
          };
        };
      };
    };
  };
  "/api/get-generate-presets": {
    /** Get settings for generating text */
    get: {
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": ({
                id: number;
                name: string;
                temperature: number;
                maxTokens: number;
                minP: number | null;
                topP: number | null;
                topK: number | null;
              })[];
          };
        };
      };
    };
  };
  "/api/create-generate-preset": {
    /** Set settings for generating text */
    post: {
      requestBody: {
        content: {
          "application/json": {
            name: string;
            temperature: number;
            maxTokens: number;
            minP: number | null;
            topP: number | null;
            topK: number | null;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              success: boolean;
            };
          };
        };
      };
    };
  };
  "/api/update-generate-preset": {
    /** Update settings for generating text */
    post: {
      requestBody: {
        content: {
          "application/json": {
            id: number;
            name: string;
            temperature: number;
            maxTokens: number;
            minP: number | null;
            topP: number | null;
            topK: number | null;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              success: boolean;
            };
          };
        };
      };
    };
  };
  "/api/delete-generate-preset": {
    /** Delete settings for generating text */
    post: {
      requestBody: {
        content: {
          "application/json": {
            id: number;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              success: boolean;
            };
          };
        };
      };
    };
  };
  "/api/models": {
    /** Get all models */
    get: {
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
                name: string;
              }[];
          };
        };
      };
    };
  };
  "/api/load-model": {
    /** Load a model */
    post: {
      requestBody: {
        content: {
          "application/json": {
            modelName: string;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              success: boolean;
            };
          };
        };
      };
    };
  };
  "/api/download-model": {
    /** Download a model */
    post: {
      requestBody: {
        content: {
          "application/json": {
            repoId: string;
            path: string;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              success: boolean;
            };
          };
        };
      };
    };
  };
  "/api/set-model-dir": {
    /** Set the model folder */
    post: {
      requestBody: {
        content: {
          "application/json": {
            dir: string;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              success: boolean;
            };
          };
        };
        /** @description Default Response */
        400: {
          content: {
            "application/json": {
              message: string;
            };
          };
        };
      };
    };
  };
  "/api/set-auto-load": {
    /** Set auto load */
    post: {
      requestBody: {
        content: {
          "application/json": {
            autoLoad: boolean;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              success: boolean;
            };
          };
        };
      };
    };
  };
  "/api/generate-stream": {
    /**
     * Generate a completion stream
     * @description Generates text and returns it using Server-Sent Events (SSE) to stream the response.
     * ```
     * event: message | final
     * data: {text}
     * ```
     *
     * The `message` event is sent for each token generated and the `final` event is sent at the end with the full response.
     *
     * This is a non standard SSE implementation in order to support sending a body and using POST requests so it will not work with the browser EventSource API.
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            prompt: string;
            maxTokens?: number;
            temperature?: number;
            minP?: number;
            topP?: number;
            topK?: number;
          };
        };
      };
      responses: {
        /** @description data: {text} */
        200: {
          content: {
            "text/event-stream": string;
          };
        };
      };
    };
  };
  "/api/status": {
    /** Get status info about the server */
    get: {
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              modelLoaded: boolean;
              currentModel?: string;
              modelDir?: string;
              autoLoad: boolean;
            };
          };
        };
      };
    };
  };
  "/api/get-prompt-presets": {
    /** Get settings for prompting */
    get: {
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
                id: number;
                name: string;
                instruction: string;
                promptTemplate: string;
              }[];
          };
        };
      };
    };
  };
  "/api/create-prompt-preset": {
    /** Create settings for prompting */
    post: {
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              id: number;
              name: string;
            };
          };
        };
      };
    };
  };
  "/api/set-prompt-preset": {
    /** Set settings for prompting */
    post: {
      requestBody: {
        content: {
          "application/json": {
            id: number;
            name: string;
            instruction: string;
            promptTemplate: string;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              success: boolean;
            };
          };
        };
      };
    };
  };
  "/api/set-active-prompt-preset": {
    /** Set active prompt preset */
    post: {
      requestBody: {
        content: {
          "application/json": {
            id: number;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              success: boolean;
            };
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
